plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
}

//使用spring的依赖管理版本,see:https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/
dependencyManagement {
    imports {
        //springboot see: https://docs.spring.io/spring-boot/appendix/dependency-versions/coordinates.html
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        //springcloud see: https://github.com/spring-cloud/spring-cloud-release/blob/main/spring-cloud-dependencies/pom.xml
        //mavenBom "org.springframework.cloud:spring-cloud-dependencies:${libs.versions.spring.cloud.release.get()}"
    }
    dependencies {
        //在这里定义的依赖,相当于是扩展bom
        //dependency(group: '', name: '', version: '') {
        //    exclude group: '', name: ''
        //}
    }
}

tasks.withType(JavaCompile).configureEach {
    // 编译参数添加-parameters用来生成元数据, 让运行时可以获取到方法的真实的参数名, 这样@RequestParam可以省略参数
    // idea的编译配置也需要添加-parameters
    options.compilerArgs << '-parameters'
}

def buildSpringBootLoaderTestJarTask = 'buildSpringBootLoaderTestJar'
def runBuildSpringBootLoaderTestJarTask = project.gradle.startParameter.taskNames.contains(buildSpringBootLoaderTestJarTask)

dependencies {
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'

    implementation group: 'org.springframework.retry', name: 'spring-retry'

    implementation group: 'org.hibernate.validator', name: 'hibernate-validator'

    //jcache
    implementation group: 'javax.cache', name: 'cache-api'

    implementation(libs.ehcache) {
        capabilities {
            requireCapability('org.ehcache:ehcache-jakarta')
        }
    }
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine'

    testImplementation(libs.htmlunit) {
        // 会导致RestTemplate使用jetty的客户端
        exclude group: 'org.eclipse.jetty.websocket', module: 'websocket-client'
    }

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'

    //处理配置元数据
    if (runBuildSpringBootLoaderTestJarTask) {
        implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    } else {
        compileOnly group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    }
    compileJava.dependsOn processResources

    //spring boot loader
    implementation group: 'org.springframework.boot', name: 'spring-boot-loader'

    // spring索引文件,加快启动速度
    compileOnly group: 'org.springframework', name: 'spring-context-indexer'

    // spring 使用aspectj的依赖
    implementation group: 'org.springframework', name: 'spring-aspects'

    // spring-session-data-redis
    implementation group: 'org.springframework.session', name: 'spring-session-data-redis'
    //lettuce
    implementation group: 'io.lettuce', name: 'lettuce-core'
}

test {
    filter {
        excludeTestsMatching "com.lzy.demo.spring.boot.loader.SpringBootLoaderTest"
        excludeTestsMatching "com.lzy.demo.spring.mvc.*.startApplication"
        excludeTestsMatching "com.lzy.demo.spring.session.SessionTest"
        excludeTestsMatching "com.lzy.demo.spring.session.SessionIdTest*"
        excludeTestsMatching "com.lzy.demo.spring.retry.RetryTest"
        excludeTestsMatching "com.lzy.demo.spring.scheduled.ScheduledTest*"
    }
}

tasks.register(buildSpringBootLoaderTestJarTask) {
    group = "build"
    if (runBuildSpringBootLoaderTestJarTask) {
        test.onlyIf { false }
        it.dependsOn tasks.build
    }
}



