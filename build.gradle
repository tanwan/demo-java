plugins {
    // gradle的应用插件分为两步: 1. 解析,找到插件的正确版本,并将它加入到脚本的类路径中 2. 应用插件(apply false可以跳过这一步)
    // 这边定义的插件只会应用到root项目,不会应用到子项目, 子项目在应用这些插件的话, 就可以省略版本信息

    // 包含了io.spring.dependency-management, 用来方便的管理依赖的版本, 但是子项目多的话,都使用此插件的话,需要花费很多时间
    // See demo-spring
    alias(libs.plugins.springboot) apply false // 相当于id 'org.springframework.boot' version '3.2.0 apply false

    //可以在gradle设置一些idea的配置
    alias(libs.plugins.idea.ext)

    // java和java-library的区别是java-library提供了dependencies的api(implementation不会传递依赖,api会)功能
    id 'java'

    alias(libs.plugins.kotlin) apply false

    // 用来更新依赖
    // See https://github.com/ben-manes/gradle-versions-plugin
    alias(libs.plugins.gradle.version)
    // See https://github.com/littlerobots/version-catalog-update-plugin
    alias(libs.plugins.version.catalog.update)
}

//所有项目(包括root项目和子项目)
allprojects {
    group 'com.lzy'
    version '1.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

//只包括子项目
subprojects {
    //有子项目还有子项目的,就只是目录,所以不需要插件和依赖
    if (it.subprojects) {
        return
    }

    //打包成可运行jar,see https://docs.gradle.org/current/userguide/application_plugin.html, 直接扩展build任务
    apply plugin: 'application'
    //使用checkstyleMain/checkstyleTest task
    apply plugin: 'checkstyle'
    apply plugin: 'project-report'
    apply plugin: 'maven-publish'

    dependencies {
        testImplementation libs.bundles.junit
        testImplementation libs.assertj.core

        //排除依赖,不能省略括号, 然后添加exclude的闭包, 也可以使用configurations{ implementation.exclude group: '', module: '' }
        //implementation(group: '', name: '', version: '') {
        //    exclude group: '', module: ''
        //}
    }


    //maven-publish See https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications
    //1.generateMetadataFileFor<PubName>Publication: 生成元数据
    //2.generatePomFileFor<PubName>Publication: 生成pom文件
    //3.publish<PubName>PublicationTo<RepoName>Repository: 将PubName发布到定义的仓库
    //4.publish<PubName>PublicationToMavenLocal: 将PubName发布到本地maven
    //5.publish: 相当于执行所有的publish<PubName>PublicationTo<RepoName>Repository
    //6.publishToMavenLocal: 相当于执行所有的publish<PubName>PublicationToMavenLocal
    publishing {
        publications {
            // PubName指的就是这边的maven
            maven(MavenPublication) {
                //生成jar,如果是有apply org.springframework.boot,也可以直接使用artifact bootJar,就不需要from components.java和versionMapping了
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }

    test {
        useJUnitPlatform()
    }

    checkstyle {
        //默认为config/checkstyle/checkstyle.xml
        configFile = rootProject.file('config/checkstyle/lzy_checkstyle.xml')
    }

    clean.doFirst {
        //删除log和out
        delete file('./log')
        delete file('./out')
    }

//这边把logback.xml添加到各个模块中的resources中,但是这边idea有个问题,会提示duplicate content roots detected
//    sourceSets {
//        main {
//            resources {
//                srcDirs rootProject.file('config/logback') include 'logback.xml'
//            }
//        }
//    }

}

//这边通过运行配置来实现日志配置
import org.jetbrains.gradle.ext.*

idea {
    project {
        //See https://github.com/JetBrains/gradle-idea-ext-plugin/wiki
        //插件处理settings的extension的toString方法需要返回一个json字符串, See ProjectSettings in https://github.com/JetBrains/gradle-idea-ext-plugin/blob/master/src/main/groovy/org/jetbrains/gradle/ext/IdeaExtPlugin.groovy
        //GradleExternalSettingsImporter会根据返回的json字符串去修改workspace.xml, See https://github.com/JetBrains/intellij-community/blob/master/plugins/gradle/tooling-extension-impl/src/org/jetbrains/plugins/gradle/tooling/builder/IntelliJProjectSettingsBuilder.groovy
        settings {
            // 使用JUnit/Application配置
            runConfigurations {
                def loggingPath = '$PROJECT_DIR$/config/logback/logback.xml'
                //原理就是往workspace.xml添加默认的配置,这个是idea去添加的,目前不支持springboot
                def loggerConfig = "-Dlogging.config=$loggingPath"
                defaults(JUnit) {
                    vmParameters = loggerConfig
                }

                defaults(Application) {
                    jvmArgs = loggerConfig
                }
            }
            //withIDEAFileXml在项目sync process后调用, reimport可以触发sync process
            //在项目sync process后调用的原理是这个插件会往workspace.xml的ExternalProjectsManager将processIdeaSettings添加给after_sync
            //ProjectSettings的toString会返回requiresPostprocessing为true
            //IDEAProjectFilesPostProcessor会根据requiresPostprocessing来添加processIdeaSettings See https://github.com/JetBrains/intellij-community/blob/master/plugins/gradle/src/org/jetbrains/plugins/gradle/service/project/GradleExternalSettingsImporter.kt
            withIDEAFileXml("workspace.xml") { XmlProvider p ->
                def loggingConfig = '-Dlogging.config=$PROJECT_DIR$/config/logback/logback-spring.xml'
                //这边是高级用法, 建议在不得已的时候才用这种方法
                def runManager = p.asNode().find { it.@name == "RunManager" }
                runManager.children().findAll { it.@type == "SpringBootApplicationConfigurationType" }.each { runner ->
                    if (!runner.children().find { it.@name == "VM_PARAMETERS" && it.@value == loggingConfig }) {
                        // 往workspace.xml添加默认的配置,类型是SpringBootApplicationConfigurationType
                        // 这边只要修改node就会应用到xml去
                        new Node(r, "option", [name: 'VM_PARAMETERS', value: loggingConfig])
                    }
                }
            }
        }
    }
}