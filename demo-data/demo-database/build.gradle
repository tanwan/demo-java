buildscript {
    dependencies {
        // 为flyway的插件提供mysql的依赖
        classpath(libs.flyway.mysql)
    }
}

plugins {
    //see https://flywaydb.org/documentation/usage/gradle/
    alias(libs.plugins.flyway)
    alias(libs.plugins.jooq)
}
dependencies {

    implementation libs.flyway.core

    implementation libs.hibernate.core

    implementation libs.bundles.jdbi

    implementation libs.hikaricp

    //jcache
    implementation libs.hibernate.jcache

    implementation(libs.ehcache) {
        capabilities {
            requireCapability('org.ehcache:ehcache-jakarta')
        }
    }

    implementation libs.freemarker

    implementation libs.spring.boot.starter.jooq

    //jooq生成代码需要的依赖
    jooqCodegen libs.mysql.connector.j
    implementation libs.mysql.connector.j

    implementation libs.mybatis.plus.boot.starter
    implementation libs.mybatis.plus.generator

    implementation libs.spring.boot.starter.data.jpa

    testImplementation libs.spring.boot.starter.test

    implementation libs.spring.boot.starter.web

    implementation libs.druid.spring.boot.starter

    //sql监控
    implementation libs.p6spy

    implementation libs.shardingsphere.jdbc.core
}

ext {
    dbUrl = 'jdbc:mysql://127.0.0.1:3306/demo'
    dbUser = 'root'
    dbPassword = '123456'
    jooqGenerateTarget = 'src/generated/jooq'
}

//如果flyway的locations使用classpath:flyway/migration,则flywayMigrate需要依赖classes
flywayMigrate.dependsOn classes
flyway {
    url = dbUrl
    user = dbUser
    password = dbPassword
    locations = ['classpath:flyway/migration']
}



//see https://www.jooq.org/doc/latest/manual/code-generation
jooq {
    configuration {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = dbUrl
            user = dbUser
            password = password
        }
        generator {
            database {
                name = "org.jooq.meta.mysql.MySQLDatabase"

                //多个使用|连接
                //excludes优化级最高
                includes = '.*'
                excludes = '''flyway_schema_history'''
                inputSchema = 'demo'
            }

            // Generation flags: See advanced configuration properties
            generate {
                deprecated = false
                records = true
                //pojo和record都有接口
                interfaces = true
                //生成pojo
                pojos = true
                fluentSetters = true
                //生成的dao没什么用,建议自己继承DAOImpl
                daos = false
                //spring注解
                springAnnotations = true
            }
            target {
                packageName = 'com.lzy.demo.jooq'
                directory = jooqGenerateTarget
            }
        }
    }
}

sourceSets {
    main {
        java {
            // jooq生成的代码添加到sourceSets
            srcDir jooqGenerateTarget
        }
    }
}

test {
    onlyIf { false }
}