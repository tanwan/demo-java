/*
 * This file is generated by jOOQ.
 */
package com.lzy.demo.jooq.tables.records;


import com.lzy.demo.jooq.enums.SimpleJdbiUseStringEnum;
import com.lzy.demo.jooq.tables.SimpleJdbi;
import com.lzy.demo.jooq.tables.interfaces.ISimpleJdbi;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SimpleJdbiRecord extends UpdatableRecordImpl<SimpleJdbiRecord> implements ISimpleJdbi {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>demo.simple_jdbi.id</code>.
     */
    @Override
    public SimpleJdbiRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>demo.simple_jdbi.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>demo.simple_jdbi.name</code>.
     */
    @Override
    public SimpleJdbiRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>demo.simple_jdbi.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>demo.simple_jdbi.use_string_enum</code>.
     */
    @Override
    public SimpleJdbiRecord setUseStringEnum(SimpleJdbiUseStringEnum value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>demo.simple_jdbi.use_string_enum</code>.
     */
    @Override
    public SimpleJdbiUseStringEnum getUseStringEnum() {
        return (SimpleJdbiUseStringEnum) get(2);
    }

    /**
     * Setter for <code>demo.simple_jdbi.use_enum_value_enum</code>.
     */
    @Override
    public SimpleJdbiRecord setUseEnumValueEnum(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>demo.simple_jdbi.use_enum_value_enum</code>.
     */
    @Override
    public Integer getUseEnumValueEnum() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ISimpleJdbi from) {
        setId(from.getId());
        setName(from.getName());
        setUseStringEnum(from.getUseStringEnum());
        setUseEnumValueEnum(from.getUseEnumValueEnum());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends ISimpleJdbi> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SimpleJdbiRecord
     */
    public SimpleJdbiRecord() {
        super(SimpleJdbi.SIMPLE_JDBI);
    }

    /**
     * Create a detached, initialised SimpleJdbiRecord
     */
    public SimpleJdbiRecord(Integer id, String name, SimpleJdbiUseStringEnum useStringEnum, Integer useEnumValueEnum) {
        super(SimpleJdbi.SIMPLE_JDBI);

        setId(id);
        setName(name);
        setUseStringEnum(useStringEnum);
        setUseEnumValueEnum(useEnumValueEnum);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SimpleJdbiRecord
     */
    public SimpleJdbiRecord(com.lzy.demo.jooq.tables.pojos.SimpleJdbi value) {
        super(SimpleJdbi.SIMPLE_JDBI);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setUseStringEnum(value.getUseStringEnum());
            setUseEnumValueEnum(value.getUseEnumValueEnum());
            resetChangedOnNotNull();
        }
    }
}
