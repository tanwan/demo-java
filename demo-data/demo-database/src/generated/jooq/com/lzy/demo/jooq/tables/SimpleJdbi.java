/*
 * This file is generated by jOOQ.
 */
package com.lzy.demo.jooq.tables;


import com.lzy.demo.jooq.Demo;
import com.lzy.demo.jooq.Keys;
import com.lzy.demo.jooq.enums.SimpleJdbiUseStringEnum;
import com.lzy.demo.jooq.tables.records.SimpleJdbiRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SimpleJdbi extends TableImpl<SimpleJdbiRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>demo.simple_jdbi</code>
     */
    public static final SimpleJdbi SIMPLE_JDBI = new SimpleJdbi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SimpleJdbiRecord> getRecordType() {
        return SimpleJdbiRecord.class;
    }

    /**
     * The column <code>demo.simple_jdbi.id</code>.
     */
    public final TableField<SimpleJdbiRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>demo.simple_jdbi.name</code>.
     */
    public final TableField<SimpleJdbiRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>demo.simple_jdbi.use_string_enum</code>.
     */
    public final TableField<SimpleJdbiRecord, SimpleJdbiUseStringEnum> USE_STRING_ENUM = createField(DSL.name("use_string_enum"), SQLDataType.VARCHAR(5).asEnumDataType(SimpleJdbiUseStringEnum.class), this, "");

    /**
     * The column <code>demo.simple_jdbi.use_enum_value_enum</code>.
     */
    public final TableField<SimpleJdbiRecord, Integer> USE_ENUM_VALUE_ENUM = createField(DSL.name("use_enum_value_enum"), SQLDataType.INTEGER, this, "");

    private SimpleJdbi(Name alias, Table<SimpleJdbiRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SimpleJdbi(Name alias, Table<SimpleJdbiRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>demo.simple_jdbi</code> table reference
     */
    public SimpleJdbi(String alias) {
        this(DSL.name(alias), SIMPLE_JDBI);
    }

    /**
     * Create an aliased <code>demo.simple_jdbi</code> table reference
     */
    public SimpleJdbi(Name alias) {
        this(alias, SIMPLE_JDBI);
    }

    /**
     * Create a <code>demo.simple_jdbi</code> table reference
     */
    public SimpleJdbi() {
        this(DSL.name("simple_jdbi"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Demo.DEMO;
    }

    @Override
    public Identity<SimpleJdbiRecord, Integer> getIdentity() {
        return (Identity<SimpleJdbiRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SimpleJdbiRecord> getPrimaryKey() {
        return Keys.KEY_SIMPLE_JDBI_PRIMARY;
    }

    @Override
    public SimpleJdbi as(String alias) {
        return new SimpleJdbi(DSL.name(alias), this);
    }

    @Override
    public SimpleJdbi as(Name alias) {
        return new SimpleJdbi(alias, this);
    }

    @Override
    public SimpleJdbi as(Table<?> alias) {
        return new SimpleJdbi(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SimpleJdbi rename(String name) {
        return new SimpleJdbi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SimpleJdbi rename(Name name) {
        return new SimpleJdbi(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SimpleJdbi rename(Table<?> name) {
        return new SimpleJdbi(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SimpleJdbi where(Condition condition) {
        return new SimpleJdbi(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SimpleJdbi where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SimpleJdbi where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SimpleJdbi where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SimpleJdbi where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SimpleJdbi where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SimpleJdbi where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SimpleJdbi where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SimpleJdbi whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SimpleJdbi whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
