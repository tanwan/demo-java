plugins {
    alias(libs.plugins.protobuf)
}

checkstyleMain {
    // 要排除校验生成的代码
    // exclude(String... excludes)使用的是相对路径RelativePathSpec, 所以这边直接指定source, 或者可以使用exclude{it.file去判断}
    source = fileTree 'src/main/java'
}

dependencies {
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    implementation libs.commons.lang3

    implementation libs.spring.context

    implementation libs.poi.ooxml

    implementation libs.bundles.jackson

    //用来解析xml,html
    implementation libs.jsoup

    implementation libs.commons.io

    //执行shell
    implementation libs.commons.exec

    //mapstruct
    implementation libs.mapstruct
    annotationProcessor libs.mapstruct.processor

    //精简版:protobuf-javalite, 普通版:protobuf-java
    implementation libs.protobuf.javalite

    implementation libs.vavr
}

test {
    filter {
        excludeTestsMatching "com.lzy.demo.base.concurrent.threadpool.ThreadPoolTest"
        excludeTestsMatching "com.lzy.demo.base.future.AsyncFutureTest"
    }
}

// See https://github.com/google/protobuf-gradle-plugin
// extractIncludeProto: 从依赖包中提取出proto文件
// extractProto: 提取出proto文件(暂不知道从哪里提取)
// generateProto: 根据proto文件生成类文件

// protobuffer文件默认放在src/main/proto,如果放在其它地方,需要进行自定义,方法参照文档
protobuf {
    // 默认为$buildDir/generated/source/proto
    // generatedFilesBaseDir = "$projectDir/src"
    protoc {
        // 自定义protoc的版本
        artifact = "com.google.protobuf:protoc:${libs.versions.protobuf.get()}"
    }
    // 使用精简版需要添加此配置, 此配置是在project.afterEvaluate执行的
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}